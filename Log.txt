****************************
2015年9月14日14:56:53
****************************

    最近看了蒋金楠写的ASP.NET Web API2框架揭秘，特此记录下点滴收获。
	
	
	
	
	URI、URL、URN的区别
	URI(Uniform Resource Identifier)，统一资源标识符，是用来给资源起一个唯一的名字，主要目的是区分开不同的资源。这是一个很宽泛的概念。
	URL(Uniform Resource Location)，统一资源定位符，是用来标识一个资源的位置。是URI的一种表现形式。
	URN(Uniform Resource Name)，统一资源名称，和URI的功能差不多，也是用来标识一个资源。也是URI的一种表现形式。
	
	
	
	
	
	异质系统互联的方法
	所谓异质系统，指的是使用不同架构、技术实现的系统，这些系统之间要想交互，过去常用的方法是web service，如SOAP、WCF等，目前流行的方法是RESTful架构，至于为什么用，仁者见仁智者见智。
	
	
	
	
	
	
	关于RESTful
	REST全称是Representational State Transfer，表现状态转换。REST不是一种具体的架构，而是一种理念，符合这种理念的架构就称之为RESTful架构。架构的核心思想就是所有的操作都是以资源为中心进行的，都是在改变资源的状态而已，这里的资源可以是具体的物理资源，如文字、
	图片、音频、视频等，也可以是某种服务，所谓的状态改变指的是客户端通过http的get、post、put、delete对它们进行了增删改查操作。
	有一种ROA(Rsource Oriented Architecture)，面向资源的架构，提出了一些基本特征，来指导我们构建RESTful Web API：
	1、采用URI标识资源                           
	   一般使用URL，因为有定位的功能。
	2、使用“链接”关联相关的资源 
       这样可以把所有的资源都串联起来，因为在RESTful架构中，资源是核心。
	3、使用统一的接口   
	   所有的Controller中只有Get、Create、Update、Delete这四种Action，如果有其他的说明还有资源没有抽取出来。
	4、使用标准的HTTP方法
	   HTTP方法即Get、Post、Put、Delete等。这条标准的含义是说具体的操作还要和HTTP方法对应起来，如获取资源要通过Get方法。ASP.NET Web API提供了Action名称和HTTP方法的自动映射功能，所以
	   只要采用这样的命名规则即可，不用再单独添加[HttpGet]属性了。
	5、支持多种资源表示形式
	   其实服务器端返回的并不是资源本身，而只是资源的一种表示形式，对Web来说，目前有两种主流的数据结构：XML和JSON，应该根据客户端的请求来提供对应的资源展示形式，不能只提供XMl或JSON一种形式，要灵活。至于客户端如何设置以何种
	   方式展示，建议放在URL中，方便用浏览器调试。
	6、无状态性
	   即每次的请求都是独立的，不用将本次的请求信息记录在服务器端，以便用于后续来自相同客户端请求的处理。
	
	
	
	
	
	
	7个常用的Http方法
	Get
	Head
	Options
	这三个都用来获取信息。Get是获取某个资源，服务器一般将资源放在响应报文的主体部分返回到客户端。Head是获取描述某个资源的元数据信息，服务器一般把这些信息放在响应报文的报头集合返回到客户端，所以这样的响应报文一般都没有主体部分。
	因为没有必要。Options是探测式的请求，目的是确定本次的请求是否符合要求，服务器并不会真的返回请求结果，只是会返回此次请求是否合法。
	
	Post
	Put
	Patch
	Delete	这四种是对资源进行添加、修改、删除操作。Delete顾名思义，就是删除资源。剩下三种容易混淆，Post和Put都可以添加、修改资源，唯一的区别是Post请求不能包含资源的URI，而Put请求可以。所以Post请求一般做添加操作，Put请求做修改操作，如果请求的资源不存在，则进行添加操作。不过Put请求进行的修改一般是把旧资源整个覆盖掉，如果想采用局部修改，则建议使用Patch请求。
	
	
	
	
	
	前面都是一些基础问题，下面开始进入Web API框架。
	在看书的过程中，有如下一些疑问：
	1、Web API为什么要寄宿在某个应用上？都可以寄宿在什么应用上？
	
	
